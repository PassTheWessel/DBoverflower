"use strict";const tls=require("tls"),http=require("http"),https=require("https");let http2;const hasHttp2=(()=>{const[t,o,e]=process.version.split(".");return 4096*+t.slice(1)+256*+o+ +e>=38912})(),ALPNProtocols=hasHttp2?["h2","http/1.1"]:["http/1.1"];function connectHttp(t){const o=http.request(t);return Promise.resolve({req:o})}function http2req(t,o){return t.request(Object.assign({":path":o.path,":method":o.method,":authority":o.host},o.headers))}function connectHttps(t){return new Promise((o,e)=>{const r=t.port=+t.port||443,s=tls.connect({host:t.host,port:r,servername:t.host,ALPNProtocols:ALPNProtocols});s.once("error",e),s.once("secureConnect",()=>{switch(s.alpnProtocol){case!1:case"http/1.1":{const e=https.request(Object.assign({createConnection:()=>s},t));o({req:e});break}case"h2":{void 0===http2&&(http2=require("http2"));const e=http2.connect({host:t.host,port:r},{createConnection:()=>s});e.port=t.port,e.host=t.host;const n=http2req(e,t);o({req:n,http2:!0,connection:e});break}default:e(new Error(`No supported ALPN protocol was negotiated, got ${s.alpnProtocol}`))}})})}module.exports=(t=>("https:"===t.protocol?connectHttps:connectHttp)(t)),module.exports.http2req=http2req;